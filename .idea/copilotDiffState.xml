<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;com.google.devtools.ksp&quot;) version &quot;2.0.21-1.0.24&quot;&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.sameerasw.nextbus&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.sameerasw.nextbus&quot;&#10;        minSdk = 33&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Play Services Location&#10;    implementation(libs.play.services.location)&#10;&#10;    // Maps&#10;    implementation(libs.play.services.maps)&#10;    implementation(libs.maps.compose)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.ksp)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.sameerasw.nextbus&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.sameerasw.nextbus&quot;&#10;        minSdk = 33&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Play Services Location&#10;    implementation(libs.play.services.location)&#10;&#10;    // Maps&#10;    implementation(libs.play.services.maps)&#10;    implementation(libs.maps.compose)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    // Room Database&#10;    implementation(libs.androidx.room.runtime)&#10;    ksp(libs.androidx.room.compiler)&#10;    implementation(libs.androidx.room.ktx)&#10;&#10;    // Serialization&#10;    implementation(libs.kotlin.serialization.json)&#10;&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/MainActivity.kt" />
              <option name="originalContent" value="package com.sameerasw.nextbus&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.core.content.ContextCompat&#10;import com.sameerasw.nextbus.ui.theme.NextBusTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            NextBusTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    MainApp(activity = this@MainActivity, modifier = Modifier.padding(innerPadding))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainApp(activity: MainActivity, modifier: Modifier = Modifier) {&#10;    var hasLocationPermission by remember { mutableStateOf(false) }&#10;    var appInitialized by remember { mutableStateOf(false) }&#10;&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        hasLocationPermission = isGranted&#10;        appInitialized = true&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        val permission = Manifest.permission.ACCESS_FINE_LOCATION&#10;&#10;        hasLocationPermission = ContextCompat.checkSelfPermission(&#10;            activity,&#10;            permission&#10;        ) == PackageManager.PERMISSION_GRANTED&#10;&#10;        if (!hasLocationPermission) {&#10;            locationPermissionLauncher.launch(permission)&#10;        } else {&#10;            appInitialized = true&#10;        }&#10;    }&#10;&#10;    if (appInitialized) {&#10;        Text(&quot;Next Bus App - Ready to use!&quot;, modifier = modifier)&#10;    } else {&#10;        Text(&quot;Requesting permissions...&quot;, modifier = modifier)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.google.android.gms.location.LocationServices&#10;import com.sameerasw.nextbus.data.AppDatabase&#10;import com.sameerasw.nextbus.data.BusScheduleRepository&#10;import com.sameerasw.nextbus.location.LocationManager&#10;import com.sameerasw.nextbus.ui.BusScheduleViewModel&#10;import com.sameerasw.nextbus.ui.screens.BusScheduleDetailScreen&#10;import com.sameerasw.nextbus.ui.screens.BusScheduleListScreen&#10;import com.sameerasw.nextbus.ui.theme.NextBusTheme&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            NextBusTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    MainApp(activity = this@MainActivity, modifier = Modifier.padding(paddingValues))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainApp(activity: MainActivity, modifier: Modifier = Modifier) {&#10;    var hasLocationPermission by remember { mutableStateOf(false) }&#10;    var appInitialized by remember { mutableStateOf(false) }&#10;    var selectedScheduleId by remember { mutableStateOf&lt;Long?&gt;(null) }&#10;&#10;    // Initialize location manager and repository&#10;    val fusedLocationProviderClient = remember {&#10;        LocationServices.getFusedLocationProviderClient(activity)&#10;    }&#10;    val locationManager = remember {&#10;        LocationManager(activity, fusedLocationProviderClient)&#10;    }&#10;&#10;    val database = remember { AppDatabase.getInstance(activity) }&#10;    val repository = remember { BusScheduleRepository(database.busScheduleDao()) }&#10;    val viewModel: BusScheduleViewModel = viewModel(&#10;        factory = object : androidx.lifecycle.ViewModelProvider.Factory {&#10;            override fun &lt;T : androidx.lifecycle.ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;                return BusScheduleViewModel(repository) as T&#10;            }&#10;        }&#10;    )&#10;&#10;    val schedules by viewModel.schedules.collectAsState()&#10;    val location by locationManager.locationState&#10;    val scope = rememberCoroutineScope()&#10;&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        hasLocationPermission = isGranted&#10;        if (isGranted) {&#10;            locationManager.startLocationUpdates()&#10;            scope.launch {&#10;                locationManager.updateAddressFromLocation()&#10;            }&#10;        }&#10;        appInitialized = true&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        val permission = Manifest.permission.ACCESS_FINE_LOCATION&#10;&#10;        hasLocationPermission = ContextCompat.checkSelfPermission(&#10;            activity,&#10;            permission&#10;        ) == PackageManager.PERMISSION_GRANTED&#10;&#10;        if (!hasLocationPermission) {&#10;            locationPermissionLauncher.launch(permission)&#10;        } else {&#10;            locationManager.startLocationUpdates()&#10;            scope.launch {&#10;                locationManager.updateAddressFromLocation()&#10;            }&#10;            appInitialized = true&#10;        }&#10;    }&#10;&#10;    Box(modifier = modifier) {&#10;        if (appInitialized) {&#10;            val selectedSchedule = schedules.find { it.id == selectedScheduleId }&#10;&#10;            if (selectedSchedule != null) {&#10;                BusScheduleDetailScreen(&#10;                    schedule = selectedSchedule,&#10;                    onBack = { selectedScheduleId = null }&#10;                )&#10;            } else {&#10;                BusScheduleListScreen(&#10;                    schedules = schedules,&#10;                    location = location,&#10;                    onAddSchedule = { timestamp, route, place, seating, latitude, longitude, address, busType, busTier, busRating -&gt;&#10;                        viewModel.addSchedule(&#10;                            timestamp, route, place, seating,&#10;                            latitude, longitude, address,&#10;                            busType, busTier, busRating&#10;                        )&#10;                    },&#10;                    onDeleteSchedule = { schedule -&gt;&#10;                        viewModel.deleteSchedule(schedule)&#10;                    },&#10;                    onSelectSchedule = { schedule -&gt;&#10;                        selectedScheduleId = schedule.id&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/data/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/data/AppDatabase.kt" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.data&#10;&#10;import android.content.Context&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;&#10;@Database(entities = [BusScheduleEntity::class], version = 1)&#10;abstract class AppDatabase : RoomDatabase() {&#10;    abstract fun busScheduleDao(): BusScheduleDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var instance: AppDatabase? = null&#10;&#10;        fun getInstance(context: Context): AppDatabase {&#10;            return instance ?: synchronized(this) {&#10;                instance ?: Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    AppDatabase::class.java,&#10;                    &quot;bus_schedule_db&quot;&#10;                ).build().also { instance = it }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/data/BusScheduleDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/data/BusScheduleDao.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.data&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.Query&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface BusScheduleDao {&#10;    @Query(&quot;SELECT * FROM bus_schedule ORDER BY timestamp DESC&quot;)&#10;    fun getAllSchedules(): Flow&lt;List&lt;BusScheduleEntity&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM bus_schedule ORDER BY timestamp DESC&quot;)&#10;    suspend fun getAll(): List&lt;BusScheduleEntity&gt;&#10;&#10;    @Query(&quot;SELECT * FROM bus_schedule WHERE id = :id&quot;)&#10;    suspend fun getById(id: Long): BusScheduleEntity?&#10;&#10;    @Insert&#10;    suspend fun insert(schedule: BusScheduleEntity): Long&#10;&#10;    @Delete&#10;    suspend fun delete(schedule: BusScheduleEntity)&#10;&#10;    @Query(&quot;DELETE FROM bus_schedule WHERE id = :id&quot;)&#10;    suspend fun deleteById(id: Long)&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/data/BusScheduleEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/data/BusScheduleEntity.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.data&#10;&#10;import androidx.room.Embedded&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;bus_schedule&quot;)&#10;data class BusScheduleEntity(&#10;    @PrimaryKey(autoGenerate = true) val id: Long = 0,&#10;    val timestamp: Long, // epoch millis&#10;    val route: String,&#10;    val place: String,&#10;    val seating: String?, // &quot;Available&quot;, &quot;Almost full&quot;, &quot;Full&quot;, &quot;Loaded&quot;&#10;    val locationLat: Double?,&#10;    val locationLng: Double?,&#10;    val locationAddress: String?,&#10;    @Embedded(prefix = &quot;bus_&quot;) val bus: BusEmbedded?&#10;)&#10;&#10;data class BusEmbedded(&#10;    val type: String? = null,&#10;    val tier: String? = null,&#10;    val rating: Double? = null&#10;)&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/data/BusScheduleRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/data/BusScheduleRepository.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.data&#10;&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import kotlinx.coroutines.flow.flowOn&#10;&#10;class BusScheduleRepository(private val dao: BusScheduleDao) {&#10;    fun getAllSchedules(): Flow&lt;List&lt;BusScheduleEntity&gt;&gt; = dao.getAllSchedules()&#10;&#10;    suspend fun insertSchedule(schedule: BusScheduleEntity): Long {&#10;        return dao.insert(schedule)&#10;    }&#10;&#10;    suspend fun deleteSchedule(schedule: BusScheduleEntity) {&#10;        dao.delete(schedule)&#10;    }&#10;&#10;    suspend fun deleteScheduleById(id: Long) {&#10;        dao.deleteById(id)&#10;    }&#10;&#10;    suspend fun getScheduleById(id: Long): BusScheduleEntity? {&#10;        return dao.getById(id)&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/location/LocationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/location/LocationManager.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.location&#10;&#10;import android.annotation.SuppressLint&#10;import android.content.Context&#10;import android.location.Address&#10;import android.location.Geocoder&#10;import android.os.Looper&#10;import androidx.compose.runtime.State&#10;import androidx.compose.runtime.mutableStateOf&#10;import com.google.android.gms.location.FusedLocationProviderClient&#10;import com.google.android.gms.location.LocationCallback&#10;import com.google.android.gms.location.LocationRequest&#10;import com.google.android.gms.location.LocationResult&#10;import com.google.android.gms.location.Priority&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import java.util.Locale&#10;&#10;data class LocationData(&#10;    val latitude: Double? = null,&#10;    val longitude: Double? = null,&#10;    val address: String? = null&#10;)&#10;&#10;class LocationManager(&#10;    private val context: Context,&#10;    private val fusedLocationProviderClient: FusedLocationProviderClient&#10;) {&#10;    private val _locationState = mutableStateOf(LocationData())&#10;    val locationState: State&lt;LocationData&gt; = _locationState&#10;&#10;    private var locationCallback: LocationCallback? = null&#10;    private val geocoder = Geocoder(context, Locale.getDefault())&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    fun startLocationUpdates() {&#10;        val locationRequest = LocationRequest.Builder(&#10;            Priority.PRIORITY_HIGH_ACCURACY,&#10;            5000L // 5 seconds&#10;        ).build()&#10;&#10;        locationCallback = object : LocationCallback() {&#10;            override fun onLocationResult(locationResult: LocationResult) {&#10;                super.onLocationResult(locationResult)&#10;                locationResult.lastLocation?.let { location -&gt;&#10;                    _locationState.value = _locationState.value.copy(&#10;                        latitude = location.latitude,&#10;                        longitude = location.longitude&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        fusedLocationProviderClient.requestLocationUpdates(&#10;            locationRequest,&#10;            locationCallback!!,&#10;            Looper.getMainLooper()&#10;        )&#10;    }&#10;&#10;    fun stopLocationUpdates() {&#10;        locationCallback?.let {&#10;            fusedLocationProviderClient.removeLocationUpdates(it)&#10;        }&#10;    }&#10;&#10;    suspend fun reverseGeocode(latitude: Double, longitude: Double): String? {&#10;        return withContext(Dispatchers.IO) {&#10;            try {&#10;                @Suppress(&quot;DEPRECATION&quot;)&#10;                val addresses: List&lt;Address&gt;? = geocoder.getFromLocation(latitude, longitude, 1)&#10;                if (!addresses.isNullOrEmpty()) {&#10;                    val address = addresses[0]&#10;                    buildAddressString(address)&#10;                } else {&#10;                    null&#10;                }&#10;            } catch (e: Exception) {&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun buildAddressString(address: Address): String {&#10;        return listOfNotNull(&#10;            address.thoroughfare,&#10;            address.locality,&#10;            address.adminArea,&#10;            address.countryName&#10;        ).joinToString(&quot;, &quot;)&#10;    }&#10;&#10;    suspend fun updateAddressFromLocation() {&#10;        val lat = _locationState.value.latitude&#10;        val lng = _locationState.value.longitude&#10;        if (lat != null &amp;&amp; lng != null) {&#10;            val address = reverseGeocode(lat, lng)&#10;            _locationState.value = _locationState.value.copy(address = address)&#10;        }&#10;    }&#10;&#10;    fun getCurrentLocation(): LocationData = _locationState.value&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/BusScheduleViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/BusScheduleViewModel.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.sameerasw.nextbus.data.BusEmbedded&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import com.sameerasw.nextbus.data.BusScheduleRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;class BusScheduleViewModel(private val repository: BusScheduleRepository) : ViewModel() {&#10;    val schedules: StateFlow&lt;List&lt;BusScheduleEntity&gt;&gt; = repository.getAllSchedules()&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun addSchedule(&#10;        timestamp: Long,&#10;        route: String,&#10;        place: String,&#10;        seating: String?,&#10;        latitude: Double?,&#10;        longitude: Double?,&#10;        address: String?,&#10;        busType: String?,&#10;        busTier: String?,&#10;        busRating: Double?&#10;    ) {&#10;        viewModelScope.launch {&#10;            val schedule = BusScheduleEntity(&#10;                timestamp = timestamp,&#10;                route = route,&#10;                place = place,&#10;                seating = seating,&#10;                locationLat = latitude,&#10;                locationLng = longitude,&#10;                locationAddress = address,&#10;                bus = BusEmbedded(&#10;                    type = busType,&#10;                    tier = busTier,&#10;                    rating = busRating&#10;                )&#10;            )&#10;            repository.insertSchedule(schedule)&#10;        }&#10;    }&#10;&#10;    fun deleteSchedule(schedule: BusScheduleEntity) {&#10;        viewModelScope.launch {&#10;            repository.deleteSchedule(schedule)&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/components/BusScheduleCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/components/BusScheduleCard.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.scale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun BusScheduleCard(&#10;    schedule: BusScheduleEntity,&#10;    onDelete: () -&gt; Unit,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 8.dp, vertical = 4.dp)&#10;            .clickable { onClick() },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp)&#10;        ) {&#10;            // Header with time and delete button&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    // Time&#10;                    Text(&#10;                        text = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault()).format(Date(schedule.timestamp)),&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Text(&#10;                        text = SimpleDateFormat(&quot;MMM dd&quot;, Locale.getDefault()).format(Date(schedule.timestamp)),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;                IconButton(onClick = onDelete, modifier = Modifier.padding(0.dp).scale(0.8f)) {&#10;                    Icon(&#10;                        Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete schedule&quot;,&#10;                        tint = MaterialTheme.colorScheme.error,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Route and Location&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.LocationOn,&#10;                    contentDescription = &quot;Route&quot;,&#10;                    modifier = Modifier&#10;                        .padding(end = 6.dp)&#10;                        .size(16.dp),&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = schedule.route,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        maxLines = 1&#10;                    )&#10;                    Text(&#10;                        text = schedule.locationAddress ?: schedule.place,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 1,&#10;                        modifier = Modifier.padding(top = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Seating and Bus Details in one row&#10;            if (schedule.seating != null || schedule.bus != null) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 6.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Seating Status&#10;                    if (schedule.seating != null) {&#10;                        androidx.compose.material3.Surface(&#10;                            color = getSeatingBackgroundColor(schedule.seating),&#10;                            shape = RoundedCornerShape(4.dp),&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&#10;                                text = schedule.seating,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = getSeatingTextColor(schedule.seating),&#10;                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Bus Details and Rating&#10;                    if (schedule.bus != null) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${schedule.bus.type?.uppercase() ?: &quot;N/A&quot;} ${schedule.bus.tier ?: &quot;&quot;}&quot;.trim(),&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                maxLines = 1&#10;                            )&#10;                            if (schedule.bus.rating != null) {&#10;                                Icon(&#10;                                    Icons.Default.Star,&#10;                                    contentDescription = &quot;Rating&quot;,&#10;                                    modifier = Modifier&#10;                                        .padding(start = 4.dp)&#10;                                        .size(14.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                                Text(&#10;                                    text = String.format(&quot;%.1f&quot;, schedule.bus.rating),&#10;                                    style = MaterialTheme.typography.labelSmall,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    modifier = Modifier.padding(start = 2.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getSeatingBackgroundColor(seating: String?): androidx.compose.ui.graphics.Color {&#10;    return when (seating) {&#10;        &quot;Available&quot; -&gt; MaterialTheme.colorScheme.primaryContainer&#10;        &quot;Almost full&quot; -&gt; MaterialTheme.colorScheme.tertiaryContainer&#10;        &quot;Full&quot; -&gt; MaterialTheme.colorScheme.errorContainer&#10;        &quot;Loaded&quot; -&gt; MaterialTheme.colorScheme.errorContainer&#10;        else -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getSeatingTextColor(seating: String?): androidx.compose.ui.graphics.Color {&#10;    return when (seating) {&#10;        &quot;Available&quot; -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;        &quot;Almost full&quot; -&gt; MaterialTheme.colorScheme.onTertiaryContainer&#10;        &quot;Full&quot; -&gt; MaterialTheme.colorScheme.onErrorContainer&#10;        &quot;Loaded&quot; -&gt; MaterialTheme.colorScheme.onErrorContainer&#10;        else -&gt; MaterialTheme.colorScheme.onSurfaceVariant&#10;    }&#10;}&#10;&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/BusScheduleDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/BusScheduleDetailScreen.kt" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.CenterAlignedTopAppBar&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BusScheduleDetailScreen(&#10;    schedule: BusScheduleEntity,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { Text(&quot;Schedule Details&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBack) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Time Section&#10;            DetailSection(title = &quot;Time&quot;) {&#10;                Text(&#10;                    text = SimpleDateFormat(&quot;EEEE, MMMM dd, yyyy 'at' HH:mm&quot;, Locale.getDefault())&#10;                        .format(Date(schedule.timestamp)),&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;            }&#10;&#10;            // Route Section&#10;            DetailSection(title = &quot;Route&quot;) {&#10;                Text(&#10;                    text = schedule.route,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            // Pickup Location Section&#10;            DetailSection(title = &quot;Pickup Location&quot;) {&#10;                Text(&#10;                    text = schedule.place,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                if (!schedule.locationAddress.isNullOrEmpty()) {&#10;                    Text(&#10;                        text = schedule.locationAddress,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(top = 4.dp)&#10;                    )&#10;                }&#10;                if (schedule.locationLat != null &amp;&amp; schedule.locationLng != null) {&#10;                    Text(&#10;                        text = String.format(&#10;                            &quot;%.4f, %.4f&quot;,&#10;                            schedule.locationLat,&#10;                            schedule.locationLng&#10;                        ),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(top = 4.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Seating Section&#10;            DetailSection(title = &quot;Seating Status&quot;) {&#10;                Text(&#10;                    text = schedule.seating ?: &quot;Unknown&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;            }&#10;&#10;            // Bus Details Section&#10;            schedule.bus?.let { bus -&gt;&#10;                DetailSection(title = &quot;Bus Details&quot;) {&#10;                    if (!bus.type.isNullOrEmpty()) {&#10;                        DetailItem(label = &quot;Type&quot;, value = bus.type)&#10;                    }&#10;                    if (!bus.tier.isNullOrEmpty()) {&#10;                        DetailItem(label = &quot;Tier&quot;, value = displayTier(bus.tier))&#10;                    }&#10;                    if (bus.rating != null) {&#10;                        DetailItem(label = &quot;Rating&quot;, value = String.format(&quot;%.1f&quot;, bus.rating))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DetailSection(&#10;    title: String,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    Column(modifier = Modifier.padding(vertical = 12.dp)) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;        content()&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DetailItem(label: String, value: String) {&#10;    Column(modifier = Modifier.padding(vertical = 4.dp)) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.padding(top = 2.dp)&#10;        )&#10;    }&#10;}&#10;&#10;private fun displayTier(tier: String): String {&#10;    return when (tier) {&#10;        &quot;x1&quot; -&gt; &quot;Executive&quot;&#10;        &quot;x1.5&quot; -&gt; &quot;Semi-Luxury&quot;&#10;        &quot;x2&quot; -&gt; &quot;Luxury&quot;&#10;        &quot;x4&quot; -&gt; &quot;Premium&quot;&#10;        else -&gt; tier&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/BusScheduleListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/BusScheduleListScreen.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.ScheduleSend&#10;import androidx.compose.material3.CenterAlignedTopAppBar&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import com.sameerasw.nextbus.location.LocationData&#10;import com.sameerasw.nextbus.ui.components.BusScheduleCard&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BusScheduleListScreen(&#10;    schedules: List&lt;BusScheduleEntity&gt;,&#10;    location: LocationData,&#10;    onAddSchedule: (&#10;        timestamp: Long,&#10;        route: String,&#10;        place: String,&#10;        seating: String?,&#10;        latitude: Double?,&#10;        longitude: Double?,&#10;        address: String?,&#10;        busType: String?,&#10;        busTier: String?,&#10;        busRating: Double?&#10;    ) -&gt; Unit,&#10;    onDeleteSchedule: (BusScheduleEntity) -&gt; Unit,&#10;    onSelectSchedule: (BusScheduleEntity) -&gt; Unit&#10;) {&#10;    var showNewScheduleSheet by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { &#10;                    Text(&#10;                        text = &quot;Bus Schedules&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showNewScheduleSheet = true },&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                contentColor = MaterialTheme.colorScheme.onPrimary&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add schedule&quot;)&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        if (schedules.isEmpty()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(innerPadding),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.ScheduleSend,&#10;                    contentDescription = &quot;No schedules&quot;,&#10;                    modifier = Modifier.padding(bottom = 16.dp),&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;                Text(&#10;                    text = &quot;No schedules yet&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;Tap + to create your first schedule&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.padding(innerPadding),&#10;                contentPadding = androidx.compose.foundation.layout.PaddingValues(8.dp)&#10;            ) {&#10;                items(schedules) { schedule -&gt;&#10;                    BusScheduleCard(&#10;                        schedule = schedule,&#10;                        onDelete = { onDeleteSchedule(schedule) },&#10;                        onClick = { onSelectSchedule(schedule) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showNewScheduleSheet) {&#10;            NewScheduleSheet(&#10;                location = location,&#10;                onDismiss = { showNewScheduleSheet = false },&#10;                onSave = onAddSchedule,&#10;                onNavigateToRouteSearch = {}&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/NewScheduleSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/NewScheduleSheet.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuBox&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TimePicker&#10;import androidx.compose.material3.rememberTimePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import com.sameerasw.nextbus.location.LocationData&#10;import java.util.Calendar&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NewScheduleSheet(&#10;    location: LocationData,&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (&#10;        timestamp: Long,&#10;        route: String,&#10;        place: String,&#10;        seating: String?,&#10;        latitude: Double?,&#10;        longitude: Double?,&#10;        address: String?,&#10;        busType: String?,&#10;        busTier: String?,&#10;        busRating: Double?&#10;    ) -&gt; Unit,&#10;    onNavigateToRouteSearch: () -&gt; Unit&#10;) {&#10;    val calendar = Calendar.getInstance()&#10;    val timePickerState = rememberTimePickerState(&#10;        initialHour = calendar.get(Calendar.HOUR_OF_DAY),&#10;        initialMinute = calendar.get(Calendar.MINUTE)&#10;    )&#10;    &#10;    var route by remember { mutableStateOf(&quot;&quot;) }&#10;    var place by remember { mutableStateOf(location.address ?: &quot;&quot;) }&#10;    var selectedSeating by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedBusType by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedTier by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var busRating by remember { mutableStateOf(&quot;&quot;) }&#10;    var showRouteSearch by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;&#10;    if (showRouteSearch) {&#10;        RouteSearchScreen(&#10;            onSelectRoute = { selectedRoute -&gt;&#10;                route = selectedRoute&#10;                showRouteSearch = false&#10;                onNavigateToRouteSearch()&#10;            },&#10;            onBack = { showRouteSearch = false }&#10;        )&#10;        return&#10;    }&#10;&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        androidx.compose.material3.Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.9f)&#10;                .padding(16.dp),&#10;            shape = androidx.compose.foundation.shape.RoundedCornerShape(12.dp),&#10;            color = MaterialTheme.colorScheme.surface&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;                    .verticalScroll(rememberScrollState())&#10;            ) {&#10;                // Header&#10;                Row(modifier = Modifier.fillMaxWidth()) {&#10;                    Text(&#10;                        text = &quot;New Schedule&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .padding(vertical = 8.dp)&#10;                    )&#10;                    IconButton(onClick = onDismiss, modifier = Modifier.padding(0.dp)) {&#10;                        Icon(Icons.Default.Close, contentDescription = &quot;Close&quot;)&#10;                    }&#10;                }&#10;&#10;                // Time Selection&#10;                SectionTitle(&quot;Departure Time&quot;)&#10;                TimePickerField(&#10;                    hour = timePickerState.hour,&#10;                    minute = timePickerState.minute,&#10;                    onPickTime = { showTimePicker = true }&#10;                )&#10;&#10;                if (showTimePicker) {&#10;                    TimePickerDialog(&#10;                        timePickerState = timePickerState,&#10;                        onDismiss = { showTimePicker = false }&#10;                    )&#10;                }&#10;&#10;                // Route Selection&#10;                SectionTitle(&quot;Route&quot;)&#10;                OutlinedTextField(&#10;                    value = route,&#10;                    onValueChange = { route = it },&#10;                    label = { Text(&quot;Select Route&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                        .clickable { showRouteSearch = true },&#10;                    readOnly = true,&#10;                    trailingIcon = {&#10;                        Button(onClick = { showRouteSearch = true }, modifier = Modifier.padding(4.dp)) {&#10;                            Text(&quot;Browse&quot;, style = MaterialTheme.typography.labelSmall)&#10;                        }&#10;                    }&#10;                )&#10;&#10;                // Pickup Location&#10;                SectionTitle(&quot;Pickup Location&quot;)&#10;                OutlinedTextField(&#10;                    value = place,&#10;                    onValueChange = { place = it },&#10;                    label = { Text(&quot;From&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp),&#10;                    leadingIcon = {&#10;                        Icon(Icons.Default.LocationOn, contentDescription = &quot;Location&quot;)&#10;                    },&#10;                    trailingIcon = {&#10;                        if (location.address != null) {&#10;                            Button(&#10;                                onClick = { place = location.address ?: &quot;&quot; },&#10;                                modifier = Modifier.padding(4.dp)&#10;                            ) {&#10;                                Text(&quot;Use Current&quot;, style = MaterialTheme.typography.labelSmall)&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;&#10;                // Seating Status&#10;                SectionTitle(&quot;Seating Status&quot;)&#10;                DropdownField(&#10;                    label = &quot;Seating&quot;,&#10;                    options = listOf(&quot;Available&quot;, &quot;Almost full&quot;, &quot;Full&quot;, &quot;Loaded&quot;),&#10;                    selectedOption = selectedSeating,&#10;                    onOptionSelected = { selectedSeating = it }&#10;                )&#10;&#10;                // Bus Type&#10;                SectionTitle(&quot;Bus Details&quot;)&#10;                DropdownField(&#10;                    label = &quot;Type&quot;,&#10;                    options = listOf(&quot;sltb&quot;, &quot;private&quot;),&#10;                    selectedOption = selectedBusType,&#10;                    onOptionSelected = { selectedBusType = it }&#10;                )&#10;&#10;                // Bus Tier&#10;                DropdownField(&#10;                    label = &quot;Tier&quot;,&#10;                    options = listOf(&quot;x1&quot;, &quot;x1.5&quot;, &quot;x2&quot;, &quot;x4&quot;),&#10;                    selectedOption = selectedTier,&#10;                    onOptionSelected = { selectedTier = it }&#10;                )&#10;&#10;                // Bus Rating&#10;                OutlinedTextField(&#10;                    value = busRating,&#10;                    onValueChange = { busRating = it },&#10;                    label = { Text(&quot;Rating (0-5)&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                )&#10;&#10;                // Save Button&#10;                Button(&#10;                    onClick = {&#10;                        if (route.isNotEmpty() &amp;&amp; place.isNotEmpty()) {&#10;                            val cal = Calendar.getInstance()&#10;                            cal.set(Calendar.HOUR_OF_DAY, timePickerState.hour)&#10;                            cal.set(Calendar.MINUTE, timePickerState.minute)&#10;                            cal.set(Calendar.SECOND, 0)&#10;&#10;                            onSave(&#10;                                cal.timeInMillis,&#10;                                route,&#10;                                place,&#10;                                selectedSeating,&#10;                                location.latitude,&#10;                                location.longitude,&#10;                                location.address,&#10;                                selectedBusType,&#10;                                selectedTier,&#10;                                busRating.toDoubleOrNull()&#10;                            )&#10;                            onDismiss()&#10;                        }&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 12.dp),&#10;                    enabled = route.isNotEmpty() &amp;&amp; place.isNotEmpty()&#10;                ) {&#10;                    Text(&quot;Create Schedule&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun TimePickerDialog(&#10;    timePickerState: androidx.compose.material3.TimePickerState,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        androidx.compose.material3.Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.85f)&#10;                .padding(16.dp),&#10;            shape = androidx.compose.foundation.shape.RoundedCornerShape(12.dp),&#10;            color = MaterialTheme.colorScheme.surface&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Select Time&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;                &#10;                TimePicker(state = timePickerState)&#10;                &#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 16.dp),&#10;                    horizontalArrangement = androidx.compose.foundation.layout.Arrangement.End&#10;                ) {&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;                    TextButton(onClick = onDismiss, modifier = Modifier.padding(start = 8.dp)) {&#10;                        Text(&quot;OK&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun TimePickerField(&#10;    hour: Int,&#10;    minute: Int,&#10;    onPickTime: () -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = String.format(&quot;%02d:%02d&quot;, hour, minute),&#10;        onValueChange = {},&#10;        label = { Text(&quot;Time&quot;) },&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;            .clickable { onPickTime() },&#10;        readOnly = true,&#10;        trailingIcon = {&#10;            Button(onClick = onPickTime, modifier = Modifier.padding(4.dp)) {&#10;                Text(&quot;Pick&quot;, style = MaterialTheme.typography.labelSmall)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun DropdownField(&#10;    label: String,&#10;    options: List&lt;String&gt;,&#10;    selectedOption: String?,&#10;    onOptionSelected: (String) -&gt; Unit&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;&#10;    ExposedDropdownMenuBox(&#10;        expanded = expanded,&#10;        onExpandedChange = { expanded = it },&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;    ) {&#10;        TextField(&#10;            value = selectedOption ?: &quot;&quot;,&#10;            onValueChange = {},&#10;            label = { Text(label) },&#10;            readOnly = true,&#10;            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },&#10;            modifier = Modifier&#10;                .menuAnchor()&#10;                .fillMaxWidth()&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = expanded,&#10;            onDismissRequest = { expanded = false }&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                androidx.compose.material3.DropdownMenuItem(&#10;                    text = { Text(option) },&#10;                    onClick = {&#10;                        onOptionSelected(option)&#10;                        expanded = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SectionTitle(title: String) {&#10;    Text(&#10;        text = title,&#10;        style = MaterialTheme.typography.titleSmall,&#10;        fontWeight = FontWeight.SemiBold,&#10;        modifier = Modifier.padding(top = 12.dp, bottom = 6.dp)&#10;    )&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/RouteSearchScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/RouteSearchScreen.kt" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.CenterAlignedTopAppBar&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.ListItem&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;val popularRoutes = listOf(&#10;    &quot;Colombo → Kandy&quot;,&#10;    &quot;Colombo → Galle&quot;,&#10;    &quot;Colombo → Jaffna&quot;,&#10;    &quot;Kandy → Colombo&quot;,&#10;    &quot;Galle → Colombo&quot;,&#10;    &quot;Colombo → Matara&quot;,&#10;    &quot;Kandy → Galle&quot;,&#10;    &quot;Colombo → Anuradhapura&quot;,&#10;    &quot;Colombo → Nuwara Eliya&quot;,&#10;    &quot;Colombo → Negombo&quot;,&#10;    &quot;Colombo → Batticaloa&quot;,&#10;    &quot;Colombo → Trincomalee&quot;,&#10;    &quot;Colombo → Kurunegala&quot;,&#10;    &quot;Colombo → Ratnapura&quot;,&#10;    &quot;Colombo → Matara&quot;,&#10;    &quot;Kandy → Nuwara Eliya&quot;&#10;)&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun RouteSearchScreen(&#10;    onSelectRoute: (String) -&gt; Unit,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val filteredRoutes = if (searchQuery.isEmpty()) {&#10;        popularRoutes&#10;    } else {&#10;        popularRoutes.filter { it.contains(searchQuery, ignoreCase = true) }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { Text(&quot;Select Route&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBack) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            TextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                placeholder = { Text(&quot;Search routes...&quot;) },&#10;                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(8.dp),&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                items(filteredRoutes) { route -&gt;&#10;                    ListItem(&#10;                        headlineContent = { Text(route) },&#10;                        modifier = Modifier.clickable {&#10;                            onSelectRoute(route)&#10;                            onBack()&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.12.3&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;ksp = &quot;2.2.10-2.0.2&quot;&#10;coreKtx = &quot;1.17.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.4&quot;&#10;activityCompose = &quot;1.11.0&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;room = &quot;2.6.1&quot;&#10;playServicesLocation = &quot;21.1.0&quot;&#10;playServicesMaps = &quot;18.2.0&quot;&#10;mapsCompose = &quot;4.3.1&quot;&#10;navigationCompose = &quot;2.7.7&quot;&#10;viewModelCompose = &quot;2.7.0&quot;&#10;kotlinSerializationJson = &quot;1.6.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-ktx = { group = &quot;androidx.room&quot;, name = &quot;room-ktx&quot;, version.ref = &quot;room&quot; }&#10;play-services-location = { group = &quot;com.google.android.gms&quot;, name = &quot;play-services-location&quot;, version.ref = &quot;playServicesLocation&quot; }&#10;play-services-maps = { group = &quot;com.google.android.gms&quot;, name = &quot;play-services-maps&quot;, version.ref = &quot;playServicesMaps&quot; }&#10;maps-compose = { group = &quot;com.google.maps.android&quot;, name = &quot;maps-compose&quot;, version.ref = &quot;mapsCompose&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;viewModelCompose&quot; }&#10;kotlin-serialization-json = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-serialization-json&quot;, version.ref = &quot;kotlinSerializationJson&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;ksp = { id = &quot;com.google.devtools.ksp&quot;, version.ref = &quot;ksp&quot; }&#10;&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.12.3&quot;&#10;kotlin = &quot;2.2.10&quot;&#10;ksp = &quot;2.2.10-2.0.2&quot;&#10;coreKtx = &quot;1.17.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.4&quot;&#10;activityCompose = &quot;1.11.0&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;room = &quot;2.7.0&quot;&#10;playServicesLocation = &quot;21.1.0&quot;&#10;playServicesMaps = &quot;18.2.0&quot;&#10;mapsCompose = &quot;4.3.1&quot;&#10;navigationCompose = &quot;2.7.7&quot;&#10;viewModelCompose = &quot;2.7.0&quot;&#10;kotlinSerializationJson = &quot;1.6.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;androidx-room-ktx = { group = &quot;androidx.room&quot;, name = &quot;room-ktx&quot;, version.ref = &quot;room&quot; }&#10;play-services-location = { group = &quot;com.google.android.gms&quot;, name = &quot;play-services-location&quot;, version.ref = &quot;playServicesLocation&quot; }&#10;play-services-maps = { group = &quot;com.google.android.gms&quot;, name = &quot;play-services-maps&quot;, version.ref = &quot;playServicesMaps&quot; }&#10;maps-compose = { group = &quot;com.google.maps.android&quot;, name = &quot;maps-compose&quot;, version.ref = &quot;mapsCompose&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;viewModelCompose&quot; }&#10;kotlin-serialization-json = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-serialization-json&quot;, version.ref = &quot;kotlinSerializationJson&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;ksp = { id = &quot;com.google.devtools.ksp&quot;, version.ref = &quot;ksp&quot; }&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>