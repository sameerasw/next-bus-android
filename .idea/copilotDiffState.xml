<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/GOOGLE_MAPS_SETUP.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/GOOGLE_MAPS_SETUP.md" />
              <option name="updatedContent" value="# Google Maps API Key Setup Guide&#10;&#10;## Overview&#10;The Google Maps API key is stored securely in `local.properties` which is **never committed to the repository**. This keeps your API key private and safe.&#10;&#10;## Setup Steps&#10;&#10;### 1. Get Your Google Maps API Key&#10;&#10;1. Go to https://console.developers.google.com&#10;2. Create a new project or select an existing one&#10;3. Enable &quot;Maps SDK for Android&quot; in APIs &amp; Services → Library&#10;4. Go to Credentials → Create API Key&#10;5. Restrict the key to Android apps with:&#10;   - **Package name**: `com.sameerasw.nextbus`&#10;   - **SHA-1 fingerprint**: `26:B4:0A:FC:D8:4B:43:93:F9:F9:79:47:06:22:AD:00:73:58:15:F3`&#10;&#10;### 2. Add API Key to local.properties&#10;&#10;Open `/local.properties` and add your API key:&#10;&#10;```properties&#10;GOOGLE_MAPS_API_KEY=YOUR_ACTUAL_API_KEY_HERE&#10;```&#10;&#10;Replace `YOUR_ACTUAL_API_KEY_HERE` with your actual API key from Google Cloud Console.&#10;&#10;### 3. Build and Run&#10;&#10;```bash&#10;./gradlew clean build&#10;```&#10;&#10;The build system will automatically:&#10;- Read the API key from `local.properties`&#10;- Inject it into `AndroidManifest.xml` at build time&#10;- Build the app with the API key embedded&#10;&#10;## Security&#10;&#10;✅ **Safe Approach:**&#10;- `local.properties` is in `.gitignore` - never committed to git&#10;- API key is injected at build time, not hardcoded in source&#10;- Each developer can have their own API key&#10;- CI/CD systems can use environment variables&#10;&#10;❌ **Never Do:**&#10;- Don't commit `local.properties` with your API key&#10;- Don't hardcode API keys in source files&#10;- Don't share API keys in messages or emails&#10;&#10;## For New Team Members&#10;&#10;When a new developer clones the repo:&#10;1. They need to generate their own API key from Google Cloud Console&#10;2. Add it to their local `local.properties` file&#10;3. Run `./gradlew clean build`&#10;4. Done! The app will build with their API key&#10;&#10;## Troubleshooting&#10;&#10;If you see &quot;Authorization failure&quot; error:&#10;- Check that the API key is correctly added to `local.properties`&#10;- Verify &quot;Maps SDK for Android&quot; is enabled in Google Cloud Console&#10;- Confirm the SHA-1 fingerprint matches your signing key&#10;- Rebuild with `./gradlew clean build`&#10;&#10;## How It Works&#10;&#10;The `build.gradle.kts` file reads `local.properties` and passes the API key to `AndroidManifest.xml` using a placeholder variable `${GOOGLE_MAPS_API_KEY}`. This way:&#10;- The manifest file doesn't contain the actual key (safe to commit)&#10;- The key is only injected at build time&#10;- Different build machines can have different keys&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;com.google.devtools.ksp&quot;) version &quot;2.0.21-1.0.24&quot;&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.sameerasw.nextbus&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.sameerasw.nextbus&quot;&#10;        minSdk = 33&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Play Services Location&#10;    implementation(libs.play.services.location)&#10;&#10;    // Maps&#10;    implementation(libs.play.services.maps)&#10;    implementation(libs.maps.compose)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.ksp)&#10;}&#10;&#10;import java.util.Properties&#10;import java.io.FileInputStream&#10;&#10;// Load local.properties to get API keys&#10;val localProperties = Properties()&#10;val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;if (localPropertiesFile.exists()) {&#10;    localProperties.load(FileInputStream(localPropertiesFile))&#10;}&#10;&#10;val googleMapsApiKey = localProperties.getProperty(&quot;GOOGLE_MAPS_API_KEY&quot;, &quot;&quot;)&#10;&#10;android {&#10;    namespace = &quot;com.sameerasw.nextbus&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.sameerasw.nextbus&quot;&#10;        minSdk = 33&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        &#10;        // Pass API key to manifest&#10;        manifestPlaceholders[&quot;GOOGLE_MAPS_API_KEY&quot;] = googleMapsApiKey&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Play Services Location&#10;    implementation(libs.play.services.location)&#10;&#10;    // Maps&#10;    implementation(libs.play.services.maps)&#10;    implementation(libs.maps.compose)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    // Room Database&#10;    implementation(libs.androidx.room.runtime)&#10;    ksp(libs.androidx.room.compiler)&#10;    implementation(libs.androidx.room.ktx)&#10;&#10;    // Serialization&#10;    implementation(libs.kotlin.serialization.json)&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Location Permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.NextBus&quot;&gt;&#10;&#10;        &lt;!-- Google Maps API Key - REPLACE WITH YOUR API KEY --&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.android.geo.API_KEY&quot;&#10;            android:value=&quot;YOUR_GOOGLE_MAPS_API_KEY_HERE&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.NextBus&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Location Permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.NextBus&quot;&gt;&#10;&#10;        &lt;!-- Google Maps API Key - Loaded from local.properties at build time --&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.android.geo.API_KEY&quot;&#10;            android:value=&quot;${GOOGLE_MAPS_API_KEY}&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.NextBus&quot;&#10;            android:windowSoftInputMode=&quot;adjustResize&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/MainActivity.kt" />
              <option name="originalContent" value="package com.sameerasw.nextbus&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.google.android.gms.location.LocationServices&#10;import com.sameerasw.nextbus.data.AppDatabase&#10;import com.sameerasw.nextbus.data.BusScheduleRepository&#10;import com.sameerasw.nextbus.location.LocationManager&#10;import com.sameerasw.nextbus.ui.BusScheduleViewModel&#10;import com.sameerasw.nextbus.ui.screens.BusScheduleDetailScreen&#10;import com.sameerasw.nextbus.ui.screens.BusScheduleListScreen&#10;import com.sameerasw.nextbus.ui.theme.NextBusTheme&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            NextBusTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    MainApp(activity = this@MainActivity, modifier = Modifier.padding(paddingValues))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainApp(activity: MainActivity, modifier: Modifier = Modifier) {&#10;    var hasLocationPermission by remember { mutableStateOf(false) }&#10;    var appInitialized by remember { mutableStateOf(false) }&#10;    var selectedScheduleId by remember { mutableStateOf&lt;Long?&gt;(null) }&#10;&#10;    // Initialize location manager and repository&#10;    val fusedLocationProviderClient = remember {&#10;        LocationServices.getFusedLocationProviderClient(activity)&#10;    }&#10;    val locationManager = remember {&#10;        LocationManager(activity, fusedLocationProviderClient)&#10;    }&#10;&#10;    val database = remember { AppDatabase.getInstance(activity) }&#10;    val repository = remember { BusScheduleRepository(database.busScheduleDao()) }&#10;    val viewModel: BusScheduleViewModel = viewModel(&#10;        factory = object : androidx.lifecycle.ViewModelProvider.Factory {&#10;            override fun &lt;T : androidx.lifecycle.ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;                return BusScheduleViewModel(repository) as T&#10;            }&#10;        }&#10;    )&#10;&#10;    val schedules by viewModel.schedules.collectAsState()&#10;    val location by locationManager.locationState&#10;    val scope = rememberCoroutineScope()&#10;&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        hasLocationPermission = isGranted&#10;        if (isGranted) {&#10;            locationManager.startLocationUpdates()&#10;            scope.launch {&#10;                locationManager.updateAddressFromLocation()&#10;            }&#10;        }&#10;        appInitialized = true&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        val permission = Manifest.permission.ACCESS_FINE_LOCATION&#10;&#10;        hasLocationPermission = ContextCompat.checkSelfPermission(&#10;            activity,&#10;            permission&#10;        ) == PackageManager.PERMISSION_GRANTED&#10;&#10;        if (!hasLocationPermission) {&#10;            locationPermissionLauncher.launch(permission)&#10;        } else {&#10;            locationManager.startLocationUpdates()&#10;            scope.launch {&#10;                locationManager.updateAddressFromLocation()&#10;            }&#10;            appInitialized = true&#10;        }&#10;    }&#10;&#10;    Box(modifier = modifier) {&#10;        if (appInitialized) {&#10;            val selectedSchedule = schedules.find { it.id == selectedScheduleId }&#10;&#10;            if (selectedSchedule != null) {&#10;                BusScheduleDetailScreen(&#10;                    schedule = selectedSchedule,&#10;                    onBack = { selectedScheduleId = null }&#10;                )&#10;            } else {&#10;                BusScheduleListScreen(&#10;                    schedules = schedules,&#10;                    location = location,&#10;                    onAddSchedule = { timestamp, route, place, seating, latitude, longitude, address, busType, busTier, busRating -&gt;&#10;                        viewModel.addSchedule(&#10;                            timestamp, route, place, seating,&#10;                            latitude, longitude, address,&#10;                            busType, busTier, busRating&#10;                        )&#10;                    },&#10;                    onDeleteSchedule = { schedule -&gt;&#10;                        viewModel.deleteSchedule(schedule)&#10;                    },&#10;                    onSelectSchedule = { schedule -&gt;&#10;                        selectedScheduleId = schedule.id&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.activity.SystemBarStyle&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.google.android.gms.location.LocationServices&#10;import com.sameerasw.nextbus.data.AppDatabase&#10;import com.sameerasw.nextbus.data.BusScheduleRepository&#10;import com.sameerasw.nextbus.location.LocationManager&#10;import com.sameerasw.nextbus.ui.BusScheduleViewModel&#10;import com.sameerasw.nextbus.ui.screens.BusScheduleDetailScreen&#10;import com.sameerasw.nextbus.ui.screens.BusScheduleListScreen&#10;import com.sameerasw.nextbus.ui.theme.NextBusTheme&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Enable full edge-to-edge drawing for both status and navigation bars&#10;        enableEdgeToEdge(&#10;            statusBarStyle = SystemBarStyle.auto(&#10;                android.graphics.Color.TRANSPARENT,&#10;                android.graphics.Color.TRANSPARENT&#10;            ),&#10;            navigationBarStyle = SystemBarStyle.auto(&#10;                android.graphics.Color.TRANSPARENT,&#10;                android.graphics.Color.TRANSPARENT&#10;            )&#10;        )&#10;&#10;        // On Android 10+ disable forced high-contrast nav bar, so app can draw beneath gesture bar&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;            window.isNavigationBarContrastEnforced = false&#10;        }&#10;&#10;        setContent {&#10;            NextBusTheme {&#10;                MainApp(activity = this@MainActivity, modifier = Modifier.fillMaxSize())&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MainApp(activity: MainActivity, modifier: Modifier = Modifier) {&#10;    var hasLocationPermission by remember { mutableStateOf(false) }&#10;    var appInitialized by remember { mutableStateOf(false) }&#10;    var selectedScheduleId by remember { mutableStateOf&lt;Long?&gt;(null) }&#10;&#10;    // Initialize location manager and repository&#10;    val fusedLocationProviderClient = remember {&#10;        LocationServices.getFusedLocationProviderClient(activity)&#10;    }&#10;    val locationManager = remember {&#10;        LocationManager(activity, fusedLocationProviderClient)&#10;    }&#10;&#10;    val database = remember { AppDatabase.getInstance(activity) }&#10;    val repository = remember { BusScheduleRepository(database.busScheduleDao()) }&#10;    val viewModel: BusScheduleViewModel = viewModel(&#10;        factory = object : androidx.lifecycle.ViewModelProvider.Factory {&#10;            override fun &lt;T : androidx.lifecycle.ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;                return BusScheduleViewModel(repository) as T&#10;            }&#10;        }&#10;    )&#10;&#10;    val schedules by viewModel.schedules.collectAsState()&#10;    val location by locationManager.locationState&#10;    val scope = rememberCoroutineScope()&#10;&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        hasLocationPermission = isGranted&#10;        if (isGranted) {&#10;            locationManager.startLocationUpdates()&#10;            scope.launch {&#10;                locationManager.updateAddressFromLocation()&#10;            }&#10;        }&#10;        appInitialized = true&#10;    }&#10;&#10;    LaunchedEffect(Unit) {&#10;        val permission = Manifest.permission.ACCESS_FINE_LOCATION&#10;&#10;        hasLocationPermission = ContextCompat.checkSelfPermission(&#10;            activity,&#10;            permission&#10;        ) == PackageManager.PERMISSION_GRANTED&#10;&#10;        if (!hasLocationPermission) {&#10;            locationPermissionLauncher.launch(permission)&#10;        } else {&#10;            locationManager.startLocationUpdates()&#10;            scope.launch {&#10;                locationManager.updateAddressFromLocation()&#10;            }&#10;            appInitialized = true&#10;        }&#10;    }&#10;&#10;    Box(modifier = modifier) {&#10;        if (appInitialized) {&#10;            val selectedSchedule = schedules.find { it.id == selectedScheduleId }&#10;&#10;            if (selectedSchedule != null) {&#10;                BusScheduleDetailScreen(&#10;                    schedule = selectedSchedule,&#10;                    onBack = { selectedScheduleId = null },&#10;                    onDelete = {&#10;                        viewModel.deleteSchedule(selectedSchedule)&#10;                        selectedScheduleId = null&#10;                    }&#10;                )&#10;            } else {&#10;                BusScheduleListScreen(&#10;                    schedules = schedules,&#10;                    location = location,&#10;                    onAddSchedule = { timestamp, route, place, seating, latitude, longitude, address, busType, busTier, busRating -&gt;&#10;                        viewModel.addSchedule(&#10;                            timestamp, route, place, seating,&#10;                            latitude, longitude, address,&#10;                            busType, busTier, busRating&#10;                        )&#10;                    },&#10;                    onSelectSchedule = { schedule -&gt;&#10;                        selectedScheduleId = schedule.id&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/components/BusScheduleCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/components/BusScheduleCard.kt" />
              <option name="originalContent" value="package com.sameerasw.nextbus.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.scale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun BusScheduleCard(&#10;    schedule: BusScheduleEntity,&#10;    onDelete: () -&gt; Unit,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 8.dp, vertical = 4.dp)&#10;            .clickable { onClick() },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp)&#10;        ) {&#10;            // Header with time and delete button&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    // Time&#10;                    Text(&#10;                        text = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault()).format(Date(schedule.timestamp)),&#10;                        style = MaterialTheme.typography.titleSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Text(&#10;                        text = SimpleDateFormat(&quot;MMM dd&quot;, Locale.getDefault()).format(Date(schedule.timestamp)),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;                IconButton(onClick = onDelete, modifier = Modifier.padding(0.dp).scale(0.8f)) {&#10;                    Icon(&#10;                        Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete schedule&quot;,&#10;                        tint = MaterialTheme.colorScheme.error,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Route and Location&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.LocationOn,&#10;                    contentDescription = &quot;Route&quot;,&#10;                    modifier = Modifier&#10;                        .padding(end = 6.dp)&#10;                        .size(16.dp),&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = schedule.route,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        maxLines = 1&#10;                    )&#10;                    Text(&#10;                        text = schedule.locationAddress ?: schedule.place,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        maxLines = 1,&#10;                        modifier = Modifier.padding(top = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Seating and Bus Details in one row&#10;            if (schedule.seating != null || schedule.bus != null) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 6.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Seating Status&#10;                    if (schedule.seating != null) {&#10;                        androidx.compose.material3.Surface(&#10;                            color = getSeatingBackgroundColor(schedule.seating),&#10;                            shape = RoundedCornerShape(4.dp),&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&#10;                                text = schedule.seating,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = getSeatingTextColor(schedule.seating),&#10;                                modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Bus Details and Rating&#10;                    if (schedule.bus != null) {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${schedule.bus.type?.uppercase() ?: &quot;N/A&quot;} ${schedule.bus.tier ?: &quot;&quot;}&quot;.trim(),&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                maxLines = 1&#10;                            )&#10;                            if (schedule.bus.rating != null) {&#10;                                Icon(&#10;                                    Icons.Default.Star,&#10;                                    contentDescription = &quot;Rating&quot;,&#10;                                    modifier = Modifier&#10;                                        .padding(start = 4.dp)&#10;                                        .size(14.dp),&#10;                                    tint = MaterialTheme.colorScheme.primary&#10;                                )&#10;                                Text(&#10;                                    text = String.format(&quot;%.1f&quot;, schedule.bus.rating),&#10;                                    style = MaterialTheme.typography.labelSmall,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    modifier = Modifier.padding(start = 2.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getSeatingBackgroundColor(seating: String?): androidx.compose.ui.graphics.Color {&#10;    return when (seating) {&#10;        &quot;Available&quot; -&gt; MaterialTheme.colorScheme.primaryContainer&#10;        &quot;Almost full&quot; -&gt; MaterialTheme.colorScheme.tertiaryContainer&#10;        &quot;Full&quot; -&gt; MaterialTheme.colorScheme.errorContainer&#10;        &quot;Loaded&quot; -&gt; MaterialTheme.colorScheme.errorContainer&#10;        else -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getSeatingTextColor(seating: String?): androidx.compose.ui.graphics.Color {&#10;    return when (seating) {&#10;        &quot;Available&quot; -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;        &quot;Almost full&quot; -&gt; MaterialTheme.colorScheme.onTertiaryContainer&#10;        &quot;Full&quot; -&gt; MaterialTheme.colorScheme.onErrorContainer&#10;        &quot;Loaded&quot; -&gt; MaterialTheme.colorScheme.onErrorContainer&#10;        else -&gt; MaterialTheme.colorScheme.onSurfaceVariant&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.components&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun BusScheduleCard(&#10;    schedule: BusScheduleEntity,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 12.dp, vertical = 6.dp)&#10;            .clickable { onClick() },&#10;        elevation = CardDefaults.cardElevation(&#10;            defaultElevation = 4.dp,&#10;            pressedElevation = 8.dp&#10;        ),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainerHigh&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp)&#10;        ) {&#10;            // Time display&#10;            Text(&#10;                text = SimpleDateFormat(&quot;hh:mm a&quot;, Locale.getDefault()).format(Date(schedule.timestamp)),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            // Route and Location Pill&#10;            Surface(&#10;                color = MaterialTheme.colorScheme.secondaryContainer,&#10;                shape = RoundedCornerShape(12.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 12.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Route&quot;,&#10;                        modifier = Modifier.size(20.dp),&#10;                        tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = schedule.route,&#10;                            style = MaterialTheme.typography.labelLarge,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                            maxLines = 1&#10;                        )&#10;                        Text(&#10;                            text = schedule.locationAddress ?: schedule.place,&#10;                            style = MaterialTheme.typography.labelSmall,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer.copy(alpha = 0.8f),&#10;                            maxLines = 1,&#10;                            modifier = Modifier.padding(top = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Seating and Bus Details Pills&#10;            if (schedule.seating != null || schedule.bus != null) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    // Seating Status Pill&#10;                    if (schedule.seating != null) {&#10;                        Surface(&#10;                            color = getSeatingBackgroundColor(schedule.seating),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Text(&#10;                                text = schedule.seating,&#10;                                style = MaterialTheme.typography.labelMedium,&#10;                                fontWeight = FontWeight.SemiBold,&#10;                                color = getSeatingTextColor(schedule.seating),&#10;                                modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Bus Details Pill&#10;                    if (schedule.bus != null) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.tertiaryContainer,&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier.weight(1f)&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),&#10;                                horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;${schedule.bus.type?.uppercase() ?: &quot;N/A&quot;} ${schedule.bus.tier ?: &quot;&quot;}&quot;.trim(),&#10;                                    style = MaterialTheme.typography.labelMedium,&#10;                                    color = MaterialTheme.colorScheme.onTertiaryContainer,&#10;                                    maxLines = 1,&#10;                                    fontWeight = FontWeight.SemiBold&#10;                                )&#10;                                if (schedule.bus.rating != null) {&#10;                                    Icon(&#10;                                        Icons.Default.Star,&#10;                                        contentDescription = &quot;Rating&quot;,&#10;                                        modifier = Modifier.size(14.dp),&#10;                                        tint = MaterialTheme.colorScheme.onTertiaryContainer&#10;                                    )&#10;                                    Text(&#10;                                        text = String.format(Locale.getDefault(), &quot;%.1f&quot;, schedule.bus.rating),&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.onTertiaryContainer&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getSeatingBackgroundColor(seating: String?): androidx.compose.ui.graphics.Color {&#10;    return when (seating) {&#10;        &quot;Available&quot; -&gt; MaterialTheme.colorScheme.primaryContainer&#10;        &quot;Almost full&quot; -&gt; MaterialTheme.colorScheme.tertiaryContainer&#10;        &quot;Full&quot; -&gt; MaterialTheme.colorScheme.errorContainer&#10;        &quot;Loaded&quot; -&gt; MaterialTheme.colorScheme.errorContainer&#10;        else -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getSeatingTextColor(seating: String?): androidx.compose.ui.graphics.Color {&#10;    return when (seating) {&#10;        &quot;Available&quot; -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;        &quot;Almost full&quot; -&gt; MaterialTheme.colorScheme.onTertiaryContainer&#10;        &quot;Full&quot; -&gt; MaterialTheme.colorScheme.onErrorContainer&#10;        &quot;Loaded&quot; -&gt; MaterialTheme.colorScheme.onErrorContainer&#10;        else -&gt; MaterialTheme.colorScheme.onSurfaceVariant&#10;    }&#10;}&#10;&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/components/MapLocationPicker.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/components/MapLocationPicker.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.components&#10;&#10;import android.location.Geocoder&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import com.google.android.gms.maps.model.CameraPosition&#10;import com.google.android.gms.maps.model.LatLng&#10;import com.google.maps.android.compose.GoogleMap&#10;import com.google.maps.android.compose.Marker&#10;import com.google.maps.android.compose.rememberCameraPositionState&#10;import com.google.maps.android.compose.rememberMarkerState&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun MapLocationPickerDialog(&#10;    initialLatitude: Double?,&#10;    initialLongitude: Double?,&#10;    onLocationSelected: (latitude: Double, longitude: Double, address: String) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val initialLat = initialLatitude ?: 0.0&#10;    val initialLng = initialLongitude ?: 0.0&#10;    val initialLocation = LatLng(initialLat, initialLng)&#10;&#10;    val markerState = rememberMarkerState(position = initialLocation)&#10;    val cameraPositionState = rememberCameraPositionState {&#10;        position = CameraPosition.fromLatLngZoom(initialLocation, 15f)&#10;    }&#10;&#10;    LaunchedEffect(initialLocation) {&#10;        markerState.position = initialLocation&#10;    }&#10;&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        androidx.compose.material3.Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.95f)&#10;                .padding(12.dp),&#10;            shape = androidx.compose.foundation.shape.RoundedCornerShape(12.dp),&#10;            color = MaterialTheme.colorScheme.surface&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                // Header&#10;                androidx.compose.foundation.layout.Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Pick Location on Map&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                    IconButton(onClick = onDismiss, modifier = Modifier.padding(0.dp)) {&#10;                        Icon(Icons.Default.Close, contentDescription = &quot;Close&quot;)&#10;                    }&#10;                }&#10;&#10;                // Google Map&#10;                GoogleMap(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(400.dp),&#10;                    cameraPositionState = cameraPositionState,&#10;                    onMapClick = { latLng -&gt;&#10;                        markerState.position = latLng&#10;                    }&#10;                ) {&#10;                    Marker(&#10;                        state = markerState,&#10;                        title = &quot;Selected Location&quot;&#10;                    )&#10;                }&#10;&#10;                // Location info and buttons&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(12.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Latitude: ${String.format(Locale.US, &quot;%.4f&quot;, markerState.position.latitude)}\nLongitude: ${String.format(Locale.US, &quot;%.4f&quot;, markerState.position.longitude)}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    // Action buttons&#10;                    androidx.compose.foundation.layout.Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(top = 8.dp),&#10;                        horizontalArrangement = androidx.compose.foundation.layout.Arrangement.End&#10;                    ) {&#10;                        TextButton(onClick = onDismiss) {&#10;                            Text(&quot;Cancel&quot;)&#10;                        }&#10;                        Button(&#10;                            onClick = {&#10;                                val geocoder = Geocoder(context, Locale.getDefault())&#10;                                try {&#10;                                    @Suppress(&quot;DEPRECATION&quot;)&#10;                                    val addresses = geocoder.getFromLocation(&#10;                                        markerState.position.latitude,&#10;                                        markerState.position.longitude,&#10;                                        1&#10;                                    )&#10;                                    val address = if (addresses != null &amp;&amp; addresses.isNotEmpty()) {&#10;                                        addresses[0].getAddressLine(0)&#10;                                    } else {&#10;                                        &quot;Location at ${String.format(Locale.US, &quot;%.4f&quot;, markerState.position.latitude)}, ${String.format(Locale.US, &quot;%.4f&quot;, markerState.position.longitude)}&quot;&#10;                                    }&#10;                                    onLocationSelected(&#10;                                        markerState.position.latitude,&#10;                                        markerState.position.longitude,&#10;                                        address&#10;                                    )&#10;                                } catch (_: Exception) {&#10;                                    onLocationSelected(&#10;                                        markerState.position.latitude,&#10;                                        markerState.position.longitude,&#10;                                        &quot;Location at ${String.format(Locale.US, &quot;%.4f&quot;, markerState.position.latitude)}, ${String.format(Locale.US, &quot;%.4f&quot;, markerState.position.longitude)}&quot;&#10;                                    )&#10;                                }&#10;                            },&#10;                            modifier = Modifier.padding(start = 8.dp)&#10;                        ) {&#10;                            Text(&quot;Confirm Location&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/BusScheduleDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/BusScheduleDetailScreen.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.CenterAlignedTopAppBar&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BusScheduleDetailScreen(&#10;    schedule: BusScheduleEntity,&#10;    onBack: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { Text(&quot;Schedule Details&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBack) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = onDelete) {&#10;                        Icon(Icons.Default.Delete, contentDescription = &quot;Delete schedule&quot;, tint = MaterialTheme.colorScheme.error)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        contentWindowInsets = WindowInsets(0, 0, 0, 0)&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(12.dp)&#10;        ) {&#10;            // Time Section&#10;            DetailSection(title = &quot;Time&quot;) {&#10;                Text(&#10;                    text = SimpleDateFormat(&quot;EEEE, MMMM dd, yyyy 'at' hh:mm a&quot;, Locale.getDefault())&#10;                        .format(Date(schedule.timestamp)),&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;            }&#10;&#10;            // Route Section&#10;            DetailSection(title = &quot;Route&quot;) {&#10;                Text(&#10;                    text = schedule.route,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            // Pickup Location Section&#10;            DetailSection(title = &quot;Pickup Location&quot;) {&#10;                Text(&#10;                    text = schedule.place,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;                if (!schedule.locationAddress.isNullOrEmpty()) {&#10;                    Text(&#10;                        text = schedule.locationAddress,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(top = 4.dp)&#10;                    )&#10;                }&#10;                if (schedule.locationLat != null &amp;&amp; schedule.locationLng != null) {&#10;                    Text(&#10;                        text = String.format(&#10;                            &quot;%.4f, %.4f&quot;,&#10;                            schedule.locationLat,&#10;                            schedule.locationLng&#10;                        ),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        modifier = Modifier.padding(top = 4.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Seating Section&#10;            DetailSection(title = &quot;Seating Status&quot;) {&#10;                Text(&#10;                    text = schedule.seating ?: &quot;Unknown&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;            }&#10;&#10;            // Bus Details Section&#10;            schedule.bus?.let { bus -&gt;&#10;                DetailSection(title = &quot;Bus Details&quot;) {&#10;                    if (!bus.type.isNullOrEmpty()) {&#10;                        DetailItem(label = &quot;Type&quot;, value = bus.type)&#10;                    }&#10;                    if (!bus.tier.isNullOrEmpty()) {&#10;                        DetailItem(label = &quot;Tier&quot;, value = displayTier(bus.tier))&#10;                    }&#10;                    if (bus.rating != null) {&#10;                        DetailItem(label = &quot;Rating&quot;, value = String.format(&quot;%.1f&quot;, bus.rating))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DetailSection(&#10;    title: String,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    Column(modifier = Modifier.padding(vertical = 12.dp)) {&#10;        Text(&#10;            text = title,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;        content()&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DetailItem(label: String, value: String) {&#10;    Column(modifier = Modifier.padding(vertical = 4.dp)) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.labelSmall,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.padding(top = 2.dp)&#10;        )&#10;    }&#10;}&#10;&#10;private fun displayTier(tier: String): String {&#10;    return when (tier) {&#10;        &quot;x1&quot; -&gt; &quot;Executive&quot;&#10;        &quot;x1.5&quot; -&gt; &quot;Semi-Luxury&quot;&#10;        &quot;x2&quot; -&gt; &quot;Luxury&quot;&#10;        &quot;x4&quot; -&gt; &quot;Premium&quot;&#10;        else -&gt; tier&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/BusScheduleListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/BusScheduleListScreen.kt" />
              <option name="originalContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Send&#10;import androidx.compose.material3.CenterAlignedTopAppBar&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import com.sameerasw.nextbus.location.LocationData&#10;import com.sameerasw.nextbus.ui.components.BusScheduleCard&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BusScheduleListScreen(&#10;    schedules: List&lt;BusScheduleEntity&gt;,&#10;    location: LocationData,&#10;    onAddSchedule: (&#10;        timestamp: Long,&#10;        route: String,&#10;        place: String,&#10;        seating: String?,&#10;        latitude: Double?,&#10;        longitude: Double?,&#10;        address: String?,&#10;        busType: String?,&#10;        busTier: String?,&#10;        busRating: Double?&#10;    ) -&gt; Unit,&#10;    onDeleteSchedule: (BusScheduleEntity) -&gt; Unit,&#10;    onSelectSchedule: (BusScheduleEntity) -&gt; Unit&#10;) {&#10;    var showNewScheduleSheet by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Bus Schedules&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall&#10;                    )&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showNewScheduleSheet = true },&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                contentColor = MaterialTheme.colorScheme.onPrimary&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add schedule&quot;)&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        if (schedules.isEmpty()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(innerPadding),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Send,&#10;                    contentDescription = &quot;No schedules&quot;,&#10;                    modifier = Modifier.padding(bottom = 16.dp),&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;                Text(&#10;                    text = &quot;No schedules yet&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;Tap + to create your first schedule&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.padding(innerPadding),&#10;                contentPadding = androidx.compose.foundation.layout.PaddingValues(8.dp)&#10;            ) {&#10;                items(schedules) { schedule -&gt;&#10;                    BusScheduleCard(&#10;                        schedule = schedule,&#10;                        onDelete = { onDeleteSchedule(schedule) },&#10;                        onClick = { onSelectSchedule(schedule) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showNewScheduleSheet) {&#10;            NewScheduleSheet(&#10;                location = location,&#10;                onDismiss = { showNewScheduleSheet = false },&#10;                onSave = onAddSchedule,&#10;                onNavigateToRouteSearch = {}&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.automirrored.filled.Send&#10;import androidx.compose.material3.CenterAlignedTopAppBar&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.HorizontalDivider&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import com.sameerasw.nextbus.data.BusScheduleEntity&#10;import com.sameerasw.nextbus.location.LocationData&#10;import com.sameerasw.nextbus.ui.components.BusScheduleCard&#10;import java.util.Calendar&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun BusScheduleListScreen(&#10;    schedules: List&lt;BusScheduleEntity&gt;,&#10;    location: LocationData,&#10;    onAddSchedule: (&#10;        timestamp: Long,&#10;        route: String,&#10;        place: String,&#10;        seating: String?,&#10;        latitude: Double?,&#10;        longitude: Double?,&#10;        address: String?,&#10;        busType: String?,&#10;        busTier: String?,&#10;        busRating: Double?&#10;    ) -&gt; Unit,&#10;    onSelectSchedule: (BusScheduleEntity) -&gt; Unit&#10;) {&#10;    var showNewScheduleSheet by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Bus Schedules&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall&#10;                    )&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showNewScheduleSheet = true },&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                contentColor = MaterialTheme.colorScheme.onPrimary,&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add schedule&quot;)&#10;            }&#10;        },&#10;        contentWindowInsets = WindowInsets(0, 0, 0, 0),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) { innerPadding -&gt;&#10;        if (schedules.isEmpty()) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(innerPadding),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Icon(&#10;                    Icons.AutoMirrored.Filled.Send,&#10;                    contentDescription = &quot;No schedules&quot;,&#10;                    modifier = Modifier.padding(bottom = 16.dp),&#10;                    tint = MaterialTheme.colorScheme.primary&#10;                )&#10;                Text(&#10;                    text = &quot;No schedules yet&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;Tap + to create your first schedule&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.padding(top = 8.dp)&#10;                )&#10;            }&#10;        } else {&#10;            val listState = rememberLazyListState()&#10;            val currentTime = System.currentTimeMillis()&#10;            &#10;            // Helper function to get time of day in milliseconds (0 to 86400000)&#10;            fun getTimeOfDay(timestamp: Long): Long {&#10;                val calendar = Calendar.getInstance()&#10;                calendar.timeInMillis = timestamp&#10;                val hour = calendar.get(Calendar.HOUR_OF_DAY)&#10;                val minute = calendar.get(Calendar.MINUTE)&#10;                val second = calendar.get(Calendar.SECOND)&#10;                return (hour * 3600000L) + (minute * 60000L) + (second * 1000L)&#10;            }&#10;            &#10;            // Get current time of day&#10;            val currentTimeOfDay = getTimeOfDay(currentTime)&#10;&#10;            // Sort schedules by time of day only (ignoring date)&#10;            val sortedSchedules = schedules.sortedBy { getTimeOfDay(it.timestamp) }&#10;            val pastSchedules = sortedSchedules.filter { getTimeOfDay(it.timestamp) &lt; currentTimeOfDay }&#10;            val upcomingSchedules = sortedSchedules.filter { getTimeOfDay(it.timestamp) &gt;= currentTimeOfDay }&#10;&#10;            // Find first upcoming schedule and auto-scroll to it&#10;            val firstUpcomingIndex = pastSchedules.size&#10;            LaunchedEffect(schedules) {&#10;                if (upcomingSchedules.isNotEmpty()) {&#10;                    listState.animateScrollToItem(maxOf(0, firstUpcomingIndex - 1))&#10;                }&#10;            }&#10;&#10;            LazyColumn(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(innerPadding),&#10;                contentPadding = PaddingValues(start = 8.dp, top = 4.dp, end = 8.dp, bottom = 32.dp),&#10;                state = listState&#10;            ) {&#10;                // Past schedules (faded)&#10;                items(pastSchedules) { schedule -&gt;&#10;                    BusScheduleCard(&#10;                        schedule = schedule,&#10;                        onClick = { onSelectSchedule(schedule) },&#10;                        modifier = Modifier.alpha(0.5f)&#10;                    )&#10;                }&#10;&#10;                // Current time divider (only show if there are both past and upcoming schedules)&#10;                if (pastSchedules.isNotEmpty() &amp;&amp; upcomingSchedules.isNotEmpty()) {&#10;                    item {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 12.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            HorizontalDivider(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth(0.5f),&#10;                                thickness = 4.dp,&#10;                                color = MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Upcoming schedules (full opacity)&#10;                items(upcomingSchedules) { schedule -&gt;&#10;                    BusScheduleCard(&#10;                        schedule = schedule,&#10;                        onClick = { onSelectSchedule(schedule) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showNewScheduleSheet) {&#10;            NewScheduleSheet(&#10;                location = location,&#10;                onDismiss = { showNewScheduleSheet = false },&#10;                onSave = onAddSchedule,&#10;                onNavigateToRouteSearch = {}&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/NewScheduleSheet.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/NewScheduleSheet.kt" />
              <option name="originalContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuBox&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TimePicker&#10;import androidx.compose.material3.rememberTimePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import com.sameerasw.nextbus.location.LocationData&#10;import java.util.Calendar&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NewScheduleSheet(&#10;    location: LocationData,&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (&#10;        timestamp: Long,&#10;        route: String,&#10;        place: String,&#10;        seating: String?,&#10;        latitude: Double?,&#10;        longitude: Double?,&#10;        address: String?,&#10;        busType: String?,&#10;        busTier: String?,&#10;        busRating: Double?&#10;    ) -&gt; Unit,&#10;    onNavigateToRouteSearch: () -&gt; Unit&#10;) {&#10;    val calendar = Calendar.getInstance()&#10;    val timePickerState = rememberTimePickerState(&#10;        initialHour = calendar.get(Calendar.HOUR_OF_DAY),&#10;        initialMinute = calendar.get(Calendar.MINUTE)&#10;    )&#10;&#10;    var route by remember { mutableStateOf(&quot;&quot;) }&#10;    var place by remember { mutableStateOf(location.address ?: &quot;&quot;) }&#10;    var selectedSeating by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedBusType by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedTier by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var busRating by remember { mutableStateOf(&quot;&quot;) }&#10;    var showRouteSearch by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;&#10;    if (showRouteSearch) {&#10;        RouteSearchScreen(&#10;            onSelectRoute = { selectedRoute -&gt;&#10;                route = selectedRoute&#10;                showRouteSearch = false&#10;                onNavigateToRouteSearch()&#10;            },&#10;            onBack = { showRouteSearch = false }&#10;        )&#10;        return&#10;    }&#10;&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        androidx.compose.material3.Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.9f)&#10;                .padding(16.dp),&#10;            shape = androidx.compose.foundation.shape.RoundedCornerShape(12.dp),&#10;            color = MaterialTheme.colorScheme.surface&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;                    .verticalScroll(rememberScrollState())&#10;            ) {&#10;                // Header&#10;                Row(modifier = Modifier.fillMaxWidth()) {&#10;                    Text(&#10;                        text = &quot;New Schedule&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .padding(vertical = 8.dp)&#10;                    )&#10;                    IconButton(onClick = onDismiss, modifier = Modifier.padding(0.dp)) {&#10;                        Icon(Icons.Default.Close, contentDescription = &quot;Close&quot;)&#10;                    }&#10;                }&#10;&#10;                // Time Selection&#10;                SectionTitle(&quot;Departure Time&quot;)&#10;                TimePickerField(&#10;                    hour = timePickerState.hour,&#10;                    minute = timePickerState.minute,&#10;                    onPickTime = { showTimePicker = true }&#10;                )&#10;&#10;                if (showTimePicker) {&#10;                    TimePickerDialog(&#10;                        timePickerState = timePickerState,&#10;                        onDismiss = { showTimePicker = false }&#10;                    )&#10;                }&#10;&#10;                // Route Selection&#10;                SectionTitle(&quot;Route&quot;)&#10;                OutlinedTextField(&#10;                    value = route,&#10;                    onValueChange = { route = it },&#10;                    label = { Text(&quot;Select Route&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                        .clickable { showRouteSearch = true },&#10;                    readOnly = true,&#10;                    trailingIcon = {&#10;                        Button(onClick = { showRouteSearch = true }, modifier = Modifier.padding(4.dp)) {&#10;                            Text(&quot;Browse&quot;, style = MaterialTheme.typography.labelSmall)&#10;                        }&#10;                    }&#10;                )&#10;&#10;                // Pickup Location&#10;                SectionTitle(&quot;Pickup Location&quot;)&#10;                OutlinedTextField(&#10;                    value = place,&#10;                    onValueChange = { place = it },&#10;                    label = { Text(&quot;From&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp),&#10;                    leadingIcon = {&#10;                        Icon(Icons.Default.LocationOn, contentDescription = &quot;Location&quot;)&#10;                    },&#10;                    trailingIcon = {&#10;                        if (location.address != null) {&#10;                            Button(&#10;                                onClick = { place = location.address ?: &quot;&quot; },&#10;                                modifier = Modifier.padding(4.dp)&#10;                            ) {&#10;                                Text(&quot;Use Current&quot;, style = MaterialTheme.typography.labelSmall)&#10;                            }&#10;                        }&#10;                    }&#10;                )&#10;&#10;                // Seating Status&#10;                SectionTitle(&quot;Seating Status&quot;)&#10;                DropdownField(&#10;                    label = &quot;Seating&quot;,&#10;                    options = listOf(&quot;Available&quot;, &quot;Almost full&quot;, &quot;Full&quot;, &quot;Loaded&quot;),&#10;                    selectedOption = selectedSeating,&#10;                    onOptionSelected = { selectedSeating = it }&#10;                )&#10;&#10;                // Bus Type&#10;                SectionTitle(&quot;Bus Details&quot;)&#10;                DropdownField(&#10;                    label = &quot;Type&quot;,&#10;                    options = listOf(&quot;sltb&quot;, &quot;private&quot;),&#10;                    selectedOption = selectedBusType,&#10;                    onOptionSelected = { selectedBusType = it }&#10;                )&#10;&#10;                // Bus Tier&#10;                DropdownField(&#10;                    label = &quot;Tier&quot;,&#10;                    options = listOf(&quot;x1&quot;, &quot;x1.5&quot;, &quot;x2&quot;, &quot;x4&quot;),&#10;                    selectedOption = selectedTier,&#10;                    onOptionSelected = { selectedTier = it }&#10;                )&#10;&#10;                // Bus Rating&#10;                OutlinedTextField(&#10;                    value = busRating,&#10;                    onValueChange = { busRating = it },&#10;                    label = { Text(&quot;Rating (0-5)&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                )&#10;&#10;                // Save Button&#10;                Button(&#10;                    onClick = {&#10;                        if (route.isNotEmpty() &amp;&amp; place.isNotEmpty()) {&#10;                            val cal = Calendar.getInstance()&#10;                            cal.set(Calendar.HOUR_OF_DAY, timePickerState.hour)&#10;                            cal.set(Calendar.MINUTE, timePickerState.minute)&#10;                            cal.set(Calendar.SECOND, 0)&#10;&#10;                            onSave(&#10;                                cal.timeInMillis,&#10;                                route,&#10;                                place,&#10;                                selectedSeating,&#10;                                location.latitude,&#10;                                location.longitude,&#10;                                location.address,&#10;                                selectedBusType,&#10;                                selectedTier,&#10;                                busRating.toDoubleOrNull()&#10;                            )&#10;                            onDismiss()&#10;                        }&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 12.dp),&#10;                    enabled = route.isNotEmpty() &amp;&amp; place.isNotEmpty()&#10;                ) {&#10;                    Text(&quot;Create Schedule&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun TimePickerDialog(&#10;    timePickerState: androidx.compose.material3.TimePickerState,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        androidx.compose.material3.Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.85f)&#10;                .padding(16.dp),&#10;            shape = androidx.compose.foundation.shape.RoundedCornerShape(12.dp),&#10;            color = MaterialTheme.colorScheme.surface&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Select Time&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                TimePicker(state = timePickerState)&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 16.dp),&#10;                    horizontalArrangement = androidx.compose.foundation.layout.Arrangement.End&#10;                ) {&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;                    TextButton(onClick = onDismiss, modifier = Modifier.padding(start = 8.dp)) {&#10;                        Text(&quot;OK&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun TimePickerField(&#10;    hour: Int,&#10;    minute: Int,&#10;    onPickTime: () -&gt; Unit&#10;) {&#10;    OutlinedTextField(&#10;        value = String.format(&quot;%02d:%02d&quot;, hour, minute),&#10;        onValueChange = {},&#10;        label = { Text(&quot;Time&quot;) },&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;            .clickable { onPickTime() },&#10;        readOnly = true,&#10;        trailingIcon = {&#10;            Button(onClick = onPickTime, modifier = Modifier.padding(4.dp)) {&#10;                Text(&quot;Pick&quot;, style = MaterialTheme.typography.labelSmall)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun DropdownField(&#10;    label: String,&#10;    options: List&lt;String&gt;,&#10;    selectedOption: String?,&#10;    onOptionSelected: (String) -&gt; Unit&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;&#10;    ExposedDropdownMenuBox(&#10;        expanded = expanded,&#10;        onExpandedChange = { expanded = it },&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;    ) {&#10;        TextField(&#10;            value = selectedOption ?: &quot;&quot;,&#10;            onValueChange = {},&#10;            label = { Text(label) },&#10;            readOnly = true,&#10;            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },&#10;            modifier = Modifier&#10;                .menuAnchor()&#10;                .fillMaxWidth()&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = expanded,&#10;            onDismissRequest = { expanded = false }&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                androidx.compose.material3.DropdownMenuItem(&#10;                    text = { Text(option) },&#10;                    onClick = {&#10;                        onOptionSelected(option)&#10;                        expanded = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SectionTitle(title: String) {&#10;    Text(&#10;        text = title,&#10;        style = MaterialTheme.typography.titleSmall,&#10;        fontWeight = FontWeight.SemiBold,&#10;        modifier = Modifier.padding(top = 12.dp, bottom = 6.dp)&#10;    )&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExposedDropdownMenuBox&#10;import androidx.compose.material3.ExposedDropdownMenuDefaults&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TimePicker&#10;import androidx.compose.material3.rememberTimePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import com.sameerasw.nextbus.location.LocationData&#10;import com.sameerasw.nextbus.ui.components.MapLocationPickerDialog&#10;import java.util.Calendar&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NewScheduleSheet(&#10;    location: LocationData,&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (&#10;        timestamp: Long,&#10;        route: String,&#10;        place: String,&#10;        seating: String?,&#10;        latitude: Double?,&#10;        longitude: Double?,&#10;        address: String?,&#10;        busType: String?,&#10;        busTier: String?,&#10;        busRating: Double?&#10;    ) -&gt; Unit,&#10;    onNavigateToRouteSearch: () -&gt; Unit&#10;) {&#10;    val calendar = Calendar.getInstance()&#10;    val timePickerState = rememberTimePickerState(&#10;        initialHour = calendar.get(Calendar.HOUR_OF_DAY),&#10;        initialMinute = calendar.get(Calendar.MINUTE)&#10;    )&#10;&#10;    var route by remember { mutableStateOf(&quot;&quot;) }&#10;    var place by remember { mutableStateOf(location.address ?: &quot;&quot;) }&#10;    var selectedLatitude by remember { mutableStateOf(location.latitude) }&#10;    var selectedLongitude by remember { mutableStateOf(location.longitude) }&#10;    var selectedAddress by remember { mutableStateOf(location.address) }&#10;    var selectedSeating by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedBusType by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedTier by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var busRating by remember { mutableStateOf(&quot;&quot;) }&#10;    var showRouteSearch by remember { mutableStateOf(false) }&#10;    var showTimePicker by remember { mutableStateOf(false) }&#10;    var showLocationPicker by remember { mutableStateOf(false) }&#10;&#10;    if (showRouteSearch) {&#10;        RouteSearchScreen(&#10;            onSelectRoute = { selectedRoute -&gt;&#10;                route = selectedRoute&#10;                showRouteSearch = false&#10;                onNavigateToRouteSearch()&#10;            },&#10;            onBack = { showRouteSearch = false }&#10;        )&#10;        return&#10;    }&#10;&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        androidx.compose.material3.Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.9f)&#10;                .padding(12.dp),&#10;            shape = androidx.compose.foundation.shape.RoundedCornerShape(12.dp),&#10;            color = MaterialTheme.colorScheme.surface&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(12.dp)&#10;                    .verticalScroll(rememberScrollState())&#10;            ) {&#10;                // Header&#10;                Row(modifier = Modifier.fillMaxWidth()) {&#10;                    Text(&#10;                        text = &quot;New Schedule&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .padding(vertical = 8.dp)&#10;                    )&#10;                    IconButton(onClick = onDismiss, modifier = Modifier.padding(0.dp)) {&#10;                        Icon(Icons.Default.Close, contentDescription = &quot;Close&quot;)&#10;                    }&#10;                }&#10;&#10;                // Time Selection&#10;                SectionTitle(&quot;Departure Time&quot;)&#10;                TimePickerField(&#10;                    hour = timePickerState.hour,&#10;                    minute = timePickerState.minute,&#10;                    onPickTime = { showTimePicker = true }&#10;                )&#10;&#10;                if (showTimePicker) {&#10;                    TimePickerDialog(&#10;                        timePickerState = timePickerState,&#10;                        onDismiss = { showTimePicker = false }&#10;                    )&#10;                }&#10;&#10;                // Route Selection&#10;                SectionTitle(&quot;Route&quot;)&#10;                OutlinedTextField(&#10;                    value = route,&#10;                    onValueChange = { route = it },&#10;                    label = { Text(&quot;Select Route&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                        .clickable { showRouteSearch = true },&#10;                    readOnly = true,&#10;                    trailingIcon = {&#10;                        Button(onClick = { showRouteSearch = true }, modifier = Modifier.padding(4.dp)) {&#10;                            Text(&quot;Browse&quot;, style = MaterialTheme.typography.labelSmall)&#10;                        }&#10;                    }&#10;                )&#10;&#10;                // Pickup Location&#10;                SectionTitle(&quot;Pickup Location&quot;)&#10;                OutlinedTextField(&#10;                    value = place,&#10;                    onValueChange = { place = it },&#10;                    label = { Text(&quot;From&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp),&#10;                    leadingIcon = {&#10;                        Icon(Icons.Default.LocationOn, contentDescription = &quot;Location&quot;)&#10;                    }&#10;                )&#10;&#10;                // Location selection buttons&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp),&#10;                    horizontalArrangement = androidx.compose.foundation.layout.Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Button(&#10;                        onClick = { place = location.address ?: &quot;&quot;; selectedLatitude = location.latitude; selectedLongitude = location.longitude; selectedAddress = location.address },&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Current Location&quot;, style = MaterialTheme.typography.labelSmall)&#10;                    }&#10;                    Button(&#10;                        onClick = { showLocationPicker = true },&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Text(&quot;Pick on Map&quot;, style = MaterialTheme.typography.labelSmall)&#10;                    }&#10;                }&#10;&#10;                // Seating Status&#10;                SectionTitle(&quot;Seating Status&quot;)&#10;                DropdownField(&#10;                    label = &quot;Seating&quot;,&#10;                    options = listOf(&quot;Available&quot;, &quot;Almost full&quot;, &quot;Full&quot;, &quot;Loaded&quot;),&#10;                    selectedOption = selectedSeating,&#10;                    onOptionSelected = { selectedSeating = it }&#10;                )&#10;&#10;                // Bus Type&#10;                SectionTitle(&quot;Bus Details&quot;)&#10;                DropdownField(&#10;                    label = &quot;Type&quot;,&#10;                    options = listOf(&quot;sltb&quot;, &quot;private&quot;),&#10;                    selectedOption = selectedBusType,&#10;                    onOptionSelected = { selectedBusType = it }&#10;                )&#10;&#10;                // Bus Tier&#10;                DropdownField(&#10;                    label = &quot;Tier&quot;,&#10;                    options = listOf(&quot;x1&quot;, &quot;x1.5&quot;, &quot;x2&quot;, &quot;x4&quot;),&#10;                    selectedOption = selectedTier,&#10;                    onOptionSelected = { selectedTier = it }&#10;                )&#10;&#10;                // Bus Rating&#10;                OutlinedTextField(&#10;                    value = busRating,&#10;                    onValueChange = { busRating = it },&#10;                    label = { Text(&quot;Rating (0-5)&quot;) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 8.dp)&#10;                )&#10;&#10;                // Save Button&#10;                Button(&#10;                    onClick = {&#10;                        if (route.isNotEmpty() &amp;&amp; place.isNotEmpty()) {&#10;                            val cal = Calendar.getInstance()&#10;                            cal.set(Calendar.HOUR_OF_DAY, timePickerState.hour)&#10;                            cal.set(Calendar.MINUTE, timePickerState.minute)&#10;                            cal.set(Calendar.SECOND, 0)&#10;&#10;                            onSave(&#10;                                cal.timeInMillis,&#10;                                route,&#10;                                place,&#10;                                selectedSeating,&#10;                                selectedLatitude,&#10;                                selectedLongitude,&#10;                                selectedAddress,&#10;                                selectedBusType,&#10;                                selectedTier,&#10;                                busRating.toDoubleOrNull()&#10;                            )&#10;                            onDismiss()&#10;                        }&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 12.dp),&#10;                    enabled = route.isNotEmpty() &amp;&amp; place.isNotEmpty()&#10;                ) {&#10;                    Text(&quot;Create Schedule&quot;)&#10;                }&#10;&#10;                // Location Picker Dialog&#10;                if (showLocationPicker) {&#10;                    MapLocationPickerDialog(&#10;                        initialLatitude = selectedLatitude,&#10;                        initialLongitude = selectedLongitude,&#10;                        onLocationSelected = { selectedLat, selectedLng, selectedAddr -&gt;&#10;                            selectedLatitude = selectedLat&#10;                            selectedLongitude = selectedLng&#10;                            selectedAddress = selectedAddr&#10;                            place = selectedAddr&#10;                            showLocationPicker = false&#10;                        },&#10;                        onDismiss = { showLocationPicker = false }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun TimePickerDialog(&#10;    timePickerState: androidx.compose.material3.TimePickerState,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Dialog(&#10;        onDismissRequest = onDismiss,&#10;        properties = DialogProperties(usePlatformDefaultWidth = false)&#10;    ) {&#10;        androidx.compose.material3.Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.85f)&#10;                .padding(12.dp),&#10;            shape = androidx.compose.foundation.shape.RoundedCornerShape(12.dp),&#10;            color = MaterialTheme.colorScheme.surface&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Select Time&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                )&#10;&#10;                TimePicker(state = timePickerState)&#10;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(top = 16.dp),&#10;                    horizontalArrangement = androidx.compose.foundation.layout.Arrangement.End&#10;                ) {&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;                    TextButton(onClick = onDismiss, modifier = Modifier.padding(start = 8.dp)) {&#10;                        Text(&quot;OK&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun TimePickerField(&#10;    hour: Int,&#10;    minute: Int,&#10;    onPickTime: () -&gt; Unit&#10;) {&#10;    val amPm = if (hour &lt; 12) &quot;AM&quot; else &quot;PM&quot;&#10;    val displayHour = if (hour == 0) 12 else if (hour &gt; 12) hour - 12 else hour&#10;&#10;    OutlinedTextField(&#10;        value = String.format(&quot;%02d:%02d %s&quot;, displayHour, minute, amPm),&#10;        onValueChange = {},&#10;        label = { Text(&quot;Time&quot;) },&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;            .clickable { onPickTime() },&#10;        readOnly = true,&#10;        trailingIcon = {&#10;            Button(onClick = onPickTime, modifier = Modifier.padding(4.dp)) {&#10;                Text(&quot;Pick&quot;, style = MaterialTheme.typography.labelSmall)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun DropdownField(&#10;    label: String,&#10;    options: List&lt;String&gt;,&#10;    selectedOption: String?,&#10;    onOptionSelected: (String) -&gt; Unit&#10;) {&#10;    var expanded by remember { mutableStateOf(false) }&#10;&#10;    ExposedDropdownMenuBox(&#10;        expanded = expanded,&#10;        onExpandedChange = { expanded = it },&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 8.dp)&#10;    ) {&#10;        TextField(&#10;            value = selectedOption ?: &quot;&quot;,&#10;            onValueChange = {},&#10;            label = { Text(label) },&#10;            readOnly = true,&#10;            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },&#10;            modifier = Modifier&#10;                .menuAnchor()&#10;                .fillMaxWidth()&#10;        )&#10;        ExposedDropdownMenu(&#10;            expanded = expanded,&#10;            onDismissRequest = { expanded = false }&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                androidx.compose.material3.DropdownMenuItem(&#10;                    text = { Text(option) },&#10;                    onClick = {&#10;                        onOptionSelected(option)&#10;                        expanded = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SectionTitle(title: String) {&#10;    Text(&#10;        text = title,&#10;        style = MaterialTheme.typography.titleSmall,&#10;        fontWeight = FontWeight.SemiBold,&#10;        modifier = Modifier.padding(top = 12.dp, bottom = 6.dp)&#10;    )&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/RouteSearchScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sameerasw/nextbus/ui/screens/RouteSearchScreen.kt" />
              <option name="updatedContent" value="package com.sameerasw.nextbus.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.CenterAlignedTopAppBar&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.ListItem&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;val popularRoutes = listOf(&#10;    &quot;Colombo → Kandy&quot;,&#10;    &quot;Colombo → Galle&quot;,&#10;    &quot;Colombo → Jaffna&quot;,&#10;    &quot;Kandy → Colombo&quot;,&#10;    &quot;Galle → Colombo&quot;,&#10;    &quot;Colombo → Matara&quot;,&#10;    &quot;Kandy → Galle&quot;,&#10;    &quot;Colombo → Anuradhapura&quot;,&#10;    &quot;Colombo → Nuwara Eliya&quot;,&#10;    &quot;Colombo → Negombo&quot;,&#10;    &quot;Colombo → Batticaloa&quot;,&#10;    &quot;Colombo → Trincomalee&quot;,&#10;    &quot;Colombo → Kurunegala&quot;,&#10;    &quot;Colombo → Ratnapura&quot;,&#10;    &quot;Colombo → Matara&quot;,&#10;    &quot;Kandy → Nuwara Eliya&quot;&#10;)&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun RouteSearchScreen(&#10;    onSelectRoute: (String) -&gt; Unit,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val filteredRoutes = if (searchQuery.isEmpty()) {&#10;        popularRoutes&#10;    } else {&#10;        popularRoutes.filter { it.contains(searchQuery, ignoreCase = true) }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = { Text(&quot;Select Route&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBack) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            TextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                placeholder = { Text(&quot;Search routes...&quot;) },&#10;                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(8.dp),&#10;                singleLine = true&#10;            )&#10;&#10;            LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                items(filteredRoutes) { route -&gt;&#10;                    ListItem(&#10;                        headlineContent = { Text(route) },&#10;                        modifier = Modifier.clickable {&#10;                            onSelectRoute(route)&#10;                            onBack()&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/local.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/local.properties" />
              <option name="originalContent" value="## This file is automatically generated by Android Studio.&#10;# Do not modify this file -- YOUR CHANGES WILL BE ERASED!&#10;#&#10;# This file should *NOT* be checked into Version Control Systems,&#10;# as it contains information specific to your local configuration.&#10;#&#10;# Location of the SDK. This is only used by Gradle.&#10;# For customization when using a Version Control System, please read the&#10;# header note.&#10;sdk.dir=/Users/sameerasandakelum/Library/Android/sdk" />
              <option name="updatedContent" value="## This file is automatically generated by Android Studio.&#10;# Do not modify this file -- YOUR CHANGES WILL BE ERASED!&#10;#&#10;# This file should *NOT* be checked into Version Control Systems,&#10;# as it contains information specific to your local configuration.&#10;#&#10;# Location of the SDK. This is only used by Gradle.&#10;# For customization when using a Version Control System, please read the&#10;# header note.&#10;sdk.dir=/Users/sameerasandakelum/Library/Android/sdk&#10;&#10;# Google Maps API Key (keep this private - never commit to repo)&#10;GOOGLE_MAPS_API_KEY=YOUR_API_KEY_HERE" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>